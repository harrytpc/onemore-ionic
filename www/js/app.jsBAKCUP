
angular.module('starter', ['ionic', 'starter.controllers', 'starter.services'])

    .run(function($ionicPlatform, $rootScope, $http, $interval, $cookies) {
      $ionicPlatform.ready(function() {
        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
        // for form inputs)
        if (window.cordova && window.cordova.plugins.Keyboard) {
          cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
          cordova.plugins.Keyboard.disableScroll(true);

        }
        if (window.StatusBar) {
          // org.apache.cordova.statusbar required
          StatusBar.styleDefault();
        }
      });

      var updateTokenInterval = $interval(function () {
        // refresh token if it's valid for less then 15 minutes
        keycloak.updateToken(15)
          .success(function (refreshed) {
            if (refreshed) {
              $cookies.put('X-Authorization-Token', keycloak.token);
            }
          });
      }, 10000);

      $cookies.put('X-Authorization-Token', keycloak.token);

      $rootScope.userLogout = function () {
        $cookies.remove('X-Authorization-Token');
        $interval.cancel(updateTokenInterval);
        keycloak.logout();
      };

      $rootScope.authData = {};

      $http.jsonp("http://localhost:9000/test?callback=JSON_CALLBACK")
        .success(function (response) {
          $rootScope.authData.token = response.token;
          $rootScope.authData.username = response.username;
        });

    })

    .config(function($stateProvider, $urlRouterProvider, $locationProvider) {
      $stateProvider

        .state('app', {
        url: '/app',
        abstract: true,
        templateUrl: 'templates/menu.html',
        controller: 'AppCtrl'
      })

      .state('app.search', {
        url: '/search',
        views: {
          'menuContent': {
            templateUrl: 'templates/search.html'
          }
        }
      })

      .state('app.browse', {
          url: '/browse',
          views: {
            'menuContent': {
              templateUrl: 'templates/browse.html'
            }
          }
        })
        .state('app.playlists', {
          url: '/playlists',
          views: {
            'menuContent': {
              templateUrl: 'templates/playlists.html',
              controller: 'PlaylistsCtrl'
            }
          }
        })

      .state('app.single', {
        url: '/playlists/:playlistId',
        views: {
          'menuContent': {
            templateUrl: 'templates/playlist.html',
            controller: 'PlaylistCtrl'
          }
        }
      })


    //HARRY
      .state('app.welcome', {
        url: '/welcome',
        views: {
          'menuContent': {
            templateUrl: 'templates/welcome.html',
            controller: 'LoginCtrl'
          }
        }

      })

      .state('app.login', {
        url: '/login',
        views: {
          'menuContent': {
            templateUrl: 'templates/login.html',
            controller: 'LoginCtrl'
          }
        }
      })

      .state('app.token', {
        url: '/token',
        views: {
          'menuContent': {
            templateUrl: 'templates/token.html',
            controller: 'TokenCtrl'
          }
        }
      });

      // $locationProvider.html5Mode(true);
      
      // if none of the above states are matched, use this as the fallback
      $urlRouterProvider.otherwise('/app/welcome');
    });


function initializeKeycloak() {
  var keycloakConfig = {
    "url": "http://localhost:8080/auth",
    "realm": "socc3r",
    "clientId": "onemore-app"
    //"credentials": {
     // "secret": "1a1b98b6-66c5-4384-a4b4-7361717e773e"
   // }
  };
  var keycloak = Keycloak(keycloakConfig);
  keycloak.init({
    onLoad: 'login-required'
  }).success(function () {
    keycloak.loadUserInfo().success(function (userInfo) {
      bootstrapAngular(keycloak, userInfo);
    });
  }).error(function(error){
    alert('erro');
  });
}

function bootstrapAngular(keycloak, userInfo) {
  
  
  angular.bootstrap(document, ['starter']);
}

// initializeKeycloak();

